<div class='flex flex-col items-center justify-center min-h-screen bg-gray-900 text-white'>
  <div class="max-w-md w-full rounded-xl shadow-lg p-8 bg-gray-800">
    <h2 class="text-3xl font-bold mb-6 text-center">Register</h2>
    <form id="register-form" novalidate class="group">
      
      <p id="error-message" class="text-red-600 text-sm font-medium mb-4 hidden mt-2"></p>
      

      <!-- Username Input -->
      <div class="mb-4">
        <label for="username" class="block mb-2 text-sm font-medium">Name:</label>
        <input 
          type="text" 
          id="username" 
          name="username" 
          required 
          class="w-full px-4 py-2 bg-gray-700 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 placeholder-gray-700 text-sm rounded-lg invalid:[&:not(:placeholder-shown):not(:focus)]:border-red-500" 
          placeholder="Username" 
        >
      </div>
      <!-- Email Input -->
      <div class="mb-4">
        <label for="email" class="block mb-2 text-sm font-medium">Email:</label>
        <input 
          type="email" 
          id="email" 
          name="email" 
          required 
          class="w-full px-4 py-2 bg-gray-700 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 placeholder-gray-700 text-sm rounded-lg invalid:[&:not(:placeholder-shown):not(:focus)]:border-red-500 peer" 
          placeholder="Email"
          pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$"
        >
        <span class="mt-2 hidden text-sm text-red-500 peer-[&:not(:placeholder-shown):not(:focus):invalid]:block">
          Please enter a valid email address
        </span>
      </div>
      <!-- Password Input -->
      <div class="mb-4">
        <label for="password" class="block mb-2 text-sm font-medium">Password:</label>
        <input 
          type="password" 
          id="password" 
          name="password" 
          required 
          class="w-full px-4 py-2 bg-gray-700 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 placeholder-gray-700 text-sm rounded-lg invalid:[&:not(:placeholder-shown):not(:focus)]:border-red-500 peer" 
          placeholder="Password"
          pattern=".{7,}"
        >
        <span class="mt-2 hidden text-sm text-red-500 peer-[&:not(:placeholder-shown):not(:focus):invalid]:block">
          Your password must be at least 7 characters long
        </span>
      </div>
      <!-- Confirm Password Input -->
      <div class="mb-4">
        <label for="confirmPassword" class="block mb-2 text-sm font-medium">Confirm Password:</label>
        <input 
          type="password" 
          id="confirmPassword" 
          name="confirmPassword" 
          required 
          class="w-full px-4 py-2 bg-gray-700 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 placeholder-gray-700 text-sm rounded-lg invalid:[&:not(:placeholder-shown):not(:focus)]:border-red-500" 
          placeholder="Confirm Password"
          pattern=".{7,}"
        >
      </div>
      <!-- Submit Button -->
      <div class="mt-4">
        <button 
          type="submit" 
          class="w-full bg-green-500 py-2 rounded text-white font-bold hover:bg-green-600 transition duration-200 group-invalid:pointer-events-none group-invalid:opacity-30"
        >
          Register
        </button>
      </div>
    </form>
    <p class="mt-4 text-center text-sm text-gray-400">
      Already have an account? 
      <a href="/auth/login" class="text-blue-400 hover:underline">Login here</a>
    </p>
  </div>
</div>

<script>
  document.querySelector("#register-form").addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = new FormData(e.target);
    const formObject = Object.fromEntries(formData.entries());

    try {
      const response = await fetch("/auth/register", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          'X-Requested-With': 'XMLHttpRequest',
          'Accept': 'application/json',
        },
        body: JSON.stringify(formObject),
      });

      if (response.status !== 200) {
        const contentType = response.headers.get('content-type');
        if (contentType && contentType.includes('application/json')) {
          const result = await response.json();
          // Display JSON error
          document.querySelector('#error-message').textContent = result.error;
          document.querySelector('#error-message').classList.remove('hidden');
        } else {
          // Handle unexpected non-JSON response
          console.error('Unexpected response format:', await response.text());
          alert('An unexpected error occurred. Please try again later.');
        }
      } else {
        const result = await response.json();
        window.location.href = result.redirectUrl;
      }
    } catch (error) {
      console.error('An unexpected error occurred:', error);
      alert('An unexpected error occurred. Please try again later.');
    }
  })
</script>